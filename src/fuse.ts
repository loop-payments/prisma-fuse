import { createWriteStream, createReadStream } from 'fs';
import { glob } from 'glob';

const AUTOGENERATED_PREFIX =
  '// ********* AUTO GENERATED FILE, DO NOT EDIT. ********* //\n' +
  '// ************ Generated by prisma-fuse *************** //\n\n';

export async function fuse({
  baseFile,
  outputFile,
  schemaFileGlob,
  excludedFileGlob,
  verbose,
}: {
  baseFile: string;
  outputFile: string;
  schemaFileGlob: string;
  excludedFileGlob: string;
  verbose: boolean;
}): Promise<void> {
  const excludedFiles = await globPromise(excludedFileGlob);
  const schemaFiles = await globPromise(schemaFileGlob);

  const filesToMerge = schemaFiles.filter(
    (file) =>
      !excludedFiles.includes(file) &&
      !file.endsWith(baseFile) &&
      !file.endsWith(outputFile),
  );

  if (verbose) {
    console.log(`Fusing Prisma schema files into ${outputFile}...`);
  }
  const writeStream = createWriteStream(outputFile);
  writeStream.write(AUTOGENERATED_PREFIX);

  // Pipe the base file.
  await pipeFile(baseFile, writeStream);
  if (verbose) {
    console.log(`Fused ${baseFile} ✔`);
  }

  // Pipe all the files to merge with a `\n` separator.
  for (const file of filesToMerge) {
    writeStream.write('\n');
    await pipeFile(file, writeStream);
    if (verbose) {
      console.log(`Fused ${file} ✔`);
    }
  }

  writeStream.end();
}

async function globPromise(path: string): Promise<string[]> {
  return await new Promise<string[]>((resolve, reject) => {
    glob(path, (error, matches) => {
      if (error != null) {
        return reject(error);
      }
      resolve(matches);
    });
  });
}

async function pipeFile(
  sourcePath: string,
  writableStream: NodeJS.WritableStream,
): Promise<NodeJS.WritableStream> {
  return await new Promise<NodeJS.WritableStream>((resolve, reject) => {
    const readable = createReadStream(sourcePath);
    readable.pipe(writableStream, { end: false });
    readable.on('end', () => {
      resolve(writableStream);
      readable.close();
    });
    readable.on('error', (error) => {
      reject(error);
      readable.close();
    });
  });
}
